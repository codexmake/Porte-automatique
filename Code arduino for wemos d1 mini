//==============================================================//
//                          CODE X MAKE                         //
//==============================================================//
//                         LE 17/07/2021                        //

#include <Servo.h>
#include <ESP8266WiFi.h>
#include <FastLED.h>

Servo myservo;


int moteurpin1 = 4; // Pin 4 du wemos d1 mini où est relier le moteur
int moteurpin2 = 5; // Pin 5 du wemos d1 mini où est relier le moteur

bool lumiauto = true;




#define LED_PIN        1
#define LED_PIN_2      1
#define NUM_LEDS       4   //Nombre de leds sur votre ruban arrière 
#define NUM_LEDS_2    14   //Nombre de leds sur votre ruban arrière 



//#define servoPin  9  A FAIRE

CRGB leds[NUM_LEDS];

CRGB leds_avant[NUM_LEDS_avant];



//                     REMPLACE AVEC TES INFO                   //                  
//==============================================================//
//                       CONFIGURATION WIFI                     //
//==============================================================//

const char* ssid     = "TA-CRU-QUOI";
const char* password = "PTDRRRRRRRR";

//////////////////////////////////////////////////////////////////



// Set web server port number to 80
WiFiServer server(80);

// Variable to store the HTTP request
String header;




// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0; 
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;


// la pin A0 sera utilisée pour la photorésistance

//////////////////////////////////////////////////////////////////


//==============================================================//
//                    LES DIVERSES ANIMATIONS                   //    
//==============================================================//  

void animations_bloquer() { 
  lumi_check();
  for (int i = 0; i <= 4; i++) {
    leds[i] = CRGB::Red;
    FastLED.show();
    delay(100);
  }

}


void animations_ouvert_avant() { 
  lumi_check();
  for (int i = 4; i >= 0; i--) {
    leds[i] = CRGB::Green;
    FastLED.show();
    delay(100);
  }
  
}
void stop_led() { 
  
  for (int i = 0; i <= 4; i++) {
    leds[i] =CRGB::Black;
    FastLED.show();
    }
  

}

void libre() {
  
int compteur = 0 ;
   
while(compteur != 12) //tant que compteur est différent de 10
{
    compteur ++ ; 
    for (int i = 0; i <= 4; i++) {
    leds[i] =CRGB::Black;
    FastLED.show();
    delay(100);
    }
    delay(100);
    for (int i = 4; i >= 0; i--) {
    leds[i] = CRGB::Blue;
    FastLED.show();
    delay(100);
    }
}
stop_led();
}


void test() { 
  
  for (int i = 0; i <= 4; i++) {
    leds[i] =CRGB::Yellow;
    FastLED.show();
    }
  

}


void lumi_check() {
    if (lumiauto) {
    FastLED.setBrightness(analogRead(A0)/4.1);
  }
  
}

//==============================================================//
//                     MOUVEMENT DU MOTEUR                      //
//==============================================================//    

void reculer(){
  digitalWrite(moteurpin1 , HIGH);
  digitalWrite(moteurpin2, LOW);
}
 
void avancer(){

  digitalWrite(moteurpin1 , LOW);
  digitalWrite(moteurpin2, HIGH);
}
 
void stopper_le_moteur(){
  digitalWrite(moteurpin1, LOW);
  digitalWrite(moteurpin2, LOW);
}

//==============================================================//
//                     La Porte                                 //
//==============================================================//    


void ouvrir_porte(){
  avancer();
  animations_ouvert_avant();
  delay(4000);              // MODIFIE ICI LA DUREE EN FONCTION DE TON MOTEUR
  stopper_le_moteur();
  libre();   // cela représente un pseudo délai de 10s si tu veux augmenter le delai de transition change le nombre tours de la boucle while 
  animations_bloquer();
  reculer();
  delay(4000);              // MODIFIE ICI LA DUREE EN FONCTION DE TON MOTEUR
  stopper_le_moteur();
  stop_led();
  
}

void fermer_porte(){
  digitalWrite(moteurpin1, HIGH);
  digitalWrite(moteurpin2, HIGH);
}

void attente(){
  digitalWrite(moteurpin1, HIGH);
  digitalWrite(moteurpin2, HIGH);
}



//////////////////////////////////////////////////////////////////

void setup() {
  
  Serial.begin(115200);
  
//////////////////////////////////////////////////////////////////

  pinMode(moteurpin1, OUTPUT); 
  pinMode(moteurpin2, OUTPUT); 
  digitalWrite(moteurpin1, LOW); 
  digitalWrite(moteurpin2, LOW);

/////////////////////Configuration Des LED////////////////////////

  FastLED.addLeds<WS2812B, LED_PIN>(leds, NUM_LEDS);
  FastLED.addLeds<WS2812B, LED_PIN>(leds_avant, NUM_LEDS_avant);


//////////////////////////////////////////////////////////////////

  // CONNEXION WIFI
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  // Print local IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();
  stop_led();
}

void loop(){
  WiFiClient client = server.available();   // Listen for incoming clients

  if (client) {                             // If a new client connects,
    Serial.println("Nouveau Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    currentTime = millis();
    previousTime = currentTime;
    while (client.connected() && currentTime - previousTime <= timeoutTime) { // loop while the client's connected
      currentTime = millis();         
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
            
//==============================================================//
//                     Les diverses liens                       //
//==============================================================//    

            if (header.indexOf("GET /ouvre-la-porte") >= 0) {
            Serial.println("La porte s'ouvre actuellement");
            server.stop();
            ouvrir_porte();
            delay(1000);
            server.begin();   // Listen for incoming clients


   
            }


            if (header.indexOf("GET /ferme-la-porte") >= 0) {
              Serial.println("La porte se ferme actuellement");
             libre();

            }


//==============================================================//
//                     La Page HTML                             //
//==============================================================//    


            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            //client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            
            // CSS to style the on/off buttons 
            // Feel free to change the background-color and font-size attributes to fit your preferences
           //client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
           // client.println(".button { background-color: #195B6A; border: none; color: white; padding: 16px 40px;");
            //client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            //client.println(".button2 {background-color: #77878A;}</style></head>");
            
            // Web Page Heading
            client.println("<body><center><h1><u>BIENVENUE A TOI !</u></h1>");


            client.println("<body><center><h2>Je ne vais pas m'embêter à faire des boutons mais voici un peu tous les liens possibles de faire, et ainsi ce que cela va faire.</h2>");
            client.println("<body><center><h3 style=\"color:#FF0000\";>ATTENTION, cette page ne s'actualise pas dès lors que vous appuyez sur les liens en dessous mais l'action aura bien lieu sans l'actualisation de la page.</h3>");
            
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}
